const map1 = array1.map(x => x * 2);

The array prototype "map" iterates over each element in the collection "array1." 
Each element is referred to generically as "x". The logic multiplies each element by 2.
The constant map1 is assigned to this mutated array of elements

const map1: new variable
array1: collection
map: prototype that iterates over a collection such as array1
x: elements in array1
=>: syntax to tell you the logic is coming, hooray!
x*2: the logic, it came :)


1. FILTER
var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

The array prototype "filter" iterates over each element in the collection "words".
Each element is referred to generically as "word".
The logic returns any word from the "words" array that has more than 6 characters.
The const results is assigned to the elements of the array that returned true.

const result: new variable
words: collection
filter: iterates over words; returns array with the elements that pass the logic
word: elements in words
=>: syntax to tell you the logic is coming, hooray!
word.length > 6: logic




2. FOREACH - change to ES6
var array1 = ['a', 'b', 'c'];

array1.forEach(function(element) {
  console.log(element);
});

var results = array1.forEach(element => ???) 
  
The array prototype "forEach" iterates over each element in the collection "array1".
Each element is referred to generically as "element".
The logic returns any element from the "array1" array .
The const results is assigned to the elements of the array that returned true.

const result: new variable
array1: collection
forEach: iterates over array1
element: elements in array1
=>: syntax to tell you the logic is coming, hooray!
Logic?


3. SORT
var months = ['March', 'Jan', 'Feb', 'Dec'];
months.sort();
console.log(months);

The array prototype "sort" iterates over each element in the collection "months".
The logic returns all elements from the "months" array in order as defined by default (alphabetized).
The console.log(months) returns var months array ['Dec', 'Feb', 'Jan', 'March']

months: collection
sort: iterates over months and returns in order (pref=defined by Unicode)
=>: syntax to tell you the logic is coming, hooray!
Logic: will do defualt unless otherwise provided (a-b, a.value-b.value, etc)


4. Reduce
// sum up Beyonces fierceness value for all of her hit songs

var fierceSum = beyonce.hits.reduce( (sum, song) => {
  sum += song.fierceness;
  return sum;
}, 0)

fierceSum



var sum = 0 
var fierceSum = beyonce.hits.map( (song) => {
  sum = sum + song.fierceness;
  return sum;
})

fierceSum


sum = 0;
var numbers = [1,2,3].map((num) => {
  sum = sum + num
  return sum
})
1st: 1
2nd: 3
3rd: 6
numbers: 6

Map OG Version
sum = 0;
var numbers = [1,2,3].map((num) => {
  sum = sum + num
  return sum
})

Map Syntactic Sugar Version (+=)
sum = 0;
var numbers = [1,2,3].map((num) => {
  sum += num
  return sum
})

Reduce Version 
var numbers = [1,2,3].reduce((sum, num) => {
  sum += num
  return sum
}, 0)


1st: 0 
2nd: 0 
3rd: 0 
numbers: 0



On line one, we are declaring a variable called hungriestDog and assigning that to a string of text
on line 3 we are declaing a function called begForTreats and since we are not invoking it we move down to line 13.
On line 13 we are declaing a variable called beggingTime and assigning it a value, number.
On line 15 we are invoking the function begForTreats
We move back to line 4.





